"""
Script de configuraci√≥n inicial para el proyecto de cat√°logo.
Ejecuta este script despu√©s de la instalaci√≥n para configurar el proyecto.
"""
import os
import sys
import django
from django.core.management import execute_from_command_line

def setup_project():
    """
    Configura el proyecto Django inicial.
    """
    print("üöÄ Configurando proyecto de cat√°logo...")
    
    # Configurar Django
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'catalogo_backend.settings')
    django.setup()
    
    try:
        # Crear migraciones
        print("üìù Creando migraciones...")
        execute_from_command_line(['manage.py', 'makemigrations'])
        
        # Aplicar migraciones
        print("üóÑÔ∏è Aplicando migraciones...")
        execute_from_command_line(['manage.py', 'migrate'])
        
        # Crear superusuario si no existe
        print("üë§ Verificando superusuario...")
        from django.contrib.auth import get_user_model
        User = get_user_model()
        
        if not User.objects.filter(is_superuser=True).exists():
            print("‚ö†Ô∏è  No se encontr√≥ superusuario. Ejecuta:")
            print("   python manage.py createsuperuser")
        else:
            print("‚úÖ Superusuario encontrado")
        
        # Cargar datos de ejemplo
        print("üì¶ Cargando datos de ejemplo...")
        load_sample_data()
        
        print("‚úÖ ¬°Configuraci√≥n completada!")
        print("\nüìã Pr√≥ximos pasos:")
        print("1. Ejecuta: python manage.py runserver")
        print("2. Visita: http://localhost:8000/admin/")
        print("3. Visita: http://localhost:8000/api/docs/")
        
    except Exception as e:
        print(f"‚ùå Error durante la configuraci√≥n: {e}")
        sys.exit(1)

def load_sample_data():
    """
    Carga datos de ejemplo en la base de datos.
    """
    from categories.models import Category
    from products.models import Product
    
    # Crear categor√≠as de ejemplo
    categories_data = [
        {'name': 'Electr√≥nicos', 'description': 'Dispositivos electr√≥nicos y tecnolog√≠a'},
        {'name': 'Ropa', 'description': 'Vestimenta y accesorios'},
        {'name': 'Hogar', 'description': 'Art√≠culos para el hogar'},
        {'name': 'Deportes', 'description': 'Equipos y accesorios deportivos'},
        {'name': 'Libros', 'description': 'Libros y material educativo'},
    ]
    
    for cat_data in categories_data:
        category, created = Category.objects.get_or_create(
            name=cat_data['name'],
            defaults={'description': cat_data['description']}
        )
        if created:
            print(f"  ‚úÖ Categor√≠a creada: {category.name}")
    
    # Crear productos de ejemplo
    products_data = [
        {
            'name': 'iPhone 15 Pro',
            'description': 'El iPhone m√°s avanzado con chip A17 Pro, c√°mara de 48MP y pantalla Super Retina XDR de 6.1 pulgadas.',
            'price': 4500000,
            'category_name': 'Electr√≥nicos',
            'stock': 15
        },
        {
            'name': 'MacBook Air M2',
            'description': 'Laptop ultradelgada con chip M2, pantalla Liquid Retina de 13.6 pulgadas y hasta 18 horas de bater√≠a.',
            'price': 6500000,
            'category_name': 'Electr√≥nicos',
            'stock': 8
        },
        {
            'name': 'Camiseta Nike Dri-FIT',
            'description': 'Camiseta deportiva de secado r√°pido con tecnolog√≠a Dri-FIT para m√°ximo rendimiento.',
            'price': 85000,
            'category_name': 'Ropa',
            'stock': 50
        },
        {
            'name': 'Sof√° 3 Puestos Gris',
            'description': 'Sof√° moderno de 3 puestos en tela gris, perfecto para salas contempor√°neas.',
            'price': 1200000,
            'category_name': 'Hogar',
            'stock': 3
        },
        {
            'name': 'Pelota de F√∫tbol Adidas',
            'description': 'Pelota oficial de f√∫tbol Adidas, ideal para partidos y entrenamientos.',
            'price': 120000,
            'category_name': 'Deportes',
            'stock': 25
        },
        {
            'name': 'Clean Code - Robert Martin',
            'description': 'Libro fundamental sobre programaci√≥n limpia y buenas pr√°cticas de desarrollo.',
            'price': 85000,
            'category_name': 'Libros',
            'stock': 12
        }
    ]
    
    for prod_data in products_data:
        try:
            category = Category.objects.get(name=prod_data['category_name'])
            product, created = Product.objects.get_or_create(
                name=prod_data['name'],
                defaults={
                    'description': prod_data['description'],
                    'price': prod_data['price'],
                    'category': category,
                    'stock': prod_data['stock']
                }
            )
            if created:
                print(f"  ‚úÖ Producto creado: {product.name}")
        except Category.DoesNotExist:
            print(f"  ‚ö†Ô∏è  Categor√≠a no encontrada: {prod_data['category_name']}")

if __name__ == '__main__':
    setup_project()



